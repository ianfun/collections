import os

const type_size = 2000
let params = commandLineParams()
var jump = newSeqOfCap[uint](30)

if params.len < 1:
  quit "Usage: [file.bf]"

proc toAsm(f: File, bf: string) = 
  # r12: global register (char* ptr)
  var counter = 0.uint
  for c in bf:
    f.write(case c:
    of '+': "incb (%r12)\n\t"
    of '-': "decb (%r12)\n\t"
    of '>': "incq %r12\n\t"
    of '<': "decq %r12\n\t"
    of '.': "movzbl (%r12), %ecx\n\tcall putchar\n\t"
    of ',': "call getchar\n\tmovb %al, (%r12)\n\t"
    of '[': (inc counter;jump.add(counter); "jmp .E" & ($counter) & "\n\t.S" & $(counter) & ": ")
    of ']': (let c = jump.pop();".E" & ($ c) & ":\n\tmovb (%r12), %al\n\ttestb %al, %al\n\tjnz .S" & ($ c) & "\n\t")
    else:
      "")
var f = open("out.S", fmWrite)
f.write("""
.file "hello_world.bf"
.ident  "generated by Nim program"

.text
.def  __main; .scl  2;  .type 32; .endef
.globl  main
.def  main; .scl  2;  .type 32; .endef
.globl  type

.bss
.align 32
type:
	.space """ & ($type_size) & """

.text
main:
	pushq %rbp
	movq  %rsp, %rbp
	subq  $32, %rsp
	call  __main
	leaq  type(%rip), %r12
	""")
try:
  toAsm(f, readFile(params[0]))
except IndexError:
  echo "error: syntax error"

f.write("""
xorl   %eax, %eax
	addq  $32, %rsp
	popq  %rbp
	ret
""")
close(f)
echo "done!"